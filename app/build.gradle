apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'
apply plugin: 'AndResGuard'

android {
    compileSdkVersion COMPILE_SDK_VERSION
    defaultConfig {
        applicationId app.APPLICATION_ID
        minSdkVersion app.MIN_SDK_VERSION
        targetSdkVersion app.TARGET_SDK_VERSION
        versionCode app.VERSION_CODE
        versionName app.VERSION_NAME
        addManifestPlaceholders([APP_NAME: "@string/app_name"])
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            addManifestPlaceholders([APP_NAME: "@string/app_name_debug"])
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            setReleaseSigningConfig(project.rootProject.file('release.properties'))
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                outputFileName = "CurrentActivity-${defaultConfig.versionName}.apk"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta3'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.github.topjohnwu.libsu:core:2.5.1'
    implementation 'com.google.android.material:material:1.2.0-alpha02'
    implementation 'com.google.firebase:firebase-core:17.2.1'
    implementation 'me.omico.aosp-part:setup-wizard-lib-compat:0.5.0'
    implementation 'me.omico.support.widget:float-window:1.2.0'
    implementation 'me.omico:base-activity-setup-wizard:1.0.3'
    implementation 'me.omico:device:1.0.3'
    implementation 'me.omico:provider:1.0.3'
    implementation 'me.omico:utils:1.0.4'
}

andResGuard {
    mappingFile = null
    use7zip = true
    useSign = true
    keepRoot = false
    whiteList = [
            "R.mipmap.*",
            "R.string.com.crashlytics.*",
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.17'
    }
    finalApkBackupPath = "${project.rootDir}/app/release/CurrentActivity-${app.VERSION_NAME}.apk"
}

def setReleaseSigningConfig(propertiesFile) {
    android {
        signingConfigs {
            release {
                if (propertiesFile.exists()) {
                    Properties localProperties = new Properties()
                    localProperties.load(propertiesFile.newDataInputStream())
                    keyAlias localProperties['key.alias']
                    keyPassword localProperties['key.password']
                    storeFile file(localProperties['store.file'])
                    storePassword localProperties['store.password']
                } else {
                    logger.error('=============================================')
                    logger.error('==== release.properties does not exists. ====')
                    logger.error('=============================================')
                }
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
}

